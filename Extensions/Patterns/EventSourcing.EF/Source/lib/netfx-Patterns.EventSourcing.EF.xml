<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:EventStore`1">
            <summary>
            Implements an event store on top of EntityFramework 4.1
            </summary>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.EF"/>
        </member>
        <member name="T:IEventStore`1">
            <summary>
            An Entity Framework-based interface that persists aggregate 
            roots with Guid identifiers and <see cref="T:StoredAggregate"/> 
            aggregate header and <see cref="T:StoredEvent"/> persisted entities.
            </summary>
            <typeparam name="TBaseEvent">The type of the base event.</typeparam>
            <remarks>
            This interface simplifies testing against the EF-based <see cref="T:EventStore`1"/> 
            as it removes the need to declare the myriad generic parameters required by the 
            base queryable event store API.
            </remarks>
        </member>
        <member name="T:IQueryableEventStore`4">
            <summary>
            Provides a common API for event stores that leverage Linq.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <typeparam name="TStoredEvent">The type of the stored event.</typeparam>
            <typeparam name="TStoredAggregate">The type of the stored aggregate.</typeparam>
        </member>
        <member name="T:IEventStore`2">
            <summary>
            Interface implemented by domain event stores.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="M:IEventStore`2.SaveChanges(AggregateRoot{`0,`1})">
            <summary>
            Saves the pending changes in the aggregate and accepts 
            the changes.
            </summary>
            <param name="aggregate">The aggregate root raising the event.</param>
        </member>
        <member name="M:IEventStore`2.Query(EventQueryCriteria{`0})">
            <summary>
            Queries the event store for events that match the given criteria.
            </summary>
            <remarks>
            Store implementations are advised to provide full support for the 
            specified criteria, but aren't required to.
            <para>
            An alternative fluent API to build the criteria object is available 
            by executing the  <see cref="M:EventQueryExtension.Query``2(IEventStore{``0,``1})"/> 
            extension method on an event store instance.
            </para>
            </remarks>
        </member>
        <member name="P:IQueryableEventStore`4.Events">
            <summary>
            Gets the stream of events persisted by the store.
            </summary>
        </member>
        <member name="M:EventStore`1.#ctor(System.String,ISerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:EventStore`1"/> class.
            </summary>
            <param name="nameOrConnectionString">The name or connection string.</param>
            <param name="serializer">The serializer to use to persist the events.</param>
        </member>
        <member name="M:EventStore`1.Query(EventQueryCriteria{System.Guid})">
            <summary>
            Queries the event store for events that match the given criteria.
            </summary>
        </member>
        <member name="M:EventStore`1.SaveChanges(AggregateRoot{System.Guid,`0})">
            <summary>
            Saves the given events raised by the given sender aggregate root.
            </summary>
            <param name="aggregate">The aggregate raising the events.</param>
        </member>
        <member name="M:EventStore`1.OnSavingAggregate(AggregateRoot{System.Guid,`0},StoredAggregate)">
            <summary>
            Extensibility hook called when an event for the given aggregate 
            is saved for the first time. At this point, the corresponding 
            aggregate header information in <see cref="T:StoredAggregate"/> entity 
            is created and persisted.
            </summary>
            <param name="aggregate">The aggregate being persisted for the first time in this event store.</param>
            <param name="entity">The entity that will be saved to the underlying database.</param>
        </member>
        <member name="M:EventStore`1.OnSavingEvent(`0,StoredEvent)">
            <summary>
            Extensibility hook called when an event is being saved to the 
            store.
            </summary>
            <param name="event">The event that will be persisted.</param>
            <param name="entity">The entity that was created to persist to the underlying database.</param>
        </member>
        <member name="P:EventStore`1.Serializer">
            <summary>
            Gets the serializer that converts the event payloads to/from a byte array.
            </summary>
        </member>
        <member name="P:EventStore`1.TypeNameConverter">
            <summary>
            Gets or sets the function that converts a <see cref="T:System.Type"/> to 
            its string representation in the store. Used to calculate the 
            values of <see cref="P:StoredAggregate.AggregateType"/> and 
            <see cref="P:StoredEvent.EventType"/>.
            </summary>
        </member>
        <member name="P:EventStore`1.Events">
            <summary>
            Gets or sets the events persisted in the store.
            </summary>
        </member>
        <member name="P:EventStore`1.Aggregates">
            <summary>
            Gets or sets the aggregate roots persisted in the store.
            </summary>
        </member>
        <member name="T:StoredAggregate">
            <summary>
            Represents the aggregate root information associated 
            with a persisted event in an event store.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing.EF"/>
        </member>
        <member name="T:IStoredAggregate`1">
            <summary>
            Represents the aggregate root information associated 
            with a persisted event in an event store.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Queryable"/>
        </member>
        <member name="P:IStoredAggregate`1.AggregateId">
            <summary>
            Gets the aggregate root identifier that the event applies to.
            </summary>
        </member>
        <member name="P:IStoredAggregate`1.AggregateType">
            <summary>
            Gets the type of the the domain object that this event applies to.
            </summary>
        </member>
        <member name="P:StoredAggregate.AggregateId">
            <summary>
            Gets the aggregate root identifier that the event applies to.
            </summary>
        </member>
        <member name="P:StoredAggregate.AggregateType">
            <summary>
            Gets the type of the the domain object that this event applies to.
            </summary>
        </member>
        <member name="T:StoredEvent">
            <summary>
            Represents a persisted event in an event store.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing.EF"/>
        </member>
        <member name="T:IStoredEvent`2">
            <summary>
            Represents a persisted event in an event store.
            </summary>
            <remarks>
            The core interface does not expose the event payload, 
            as its representation as well as specific storage type
            and serialization/deserialization can vary wildly 
            across store implementation. Imposing a particular 
            representation via this interface would be unnecessarily 
            restrictive and is not needed for the rest of the APIs.
            </remarks>
            <typeparam name="TStoredAggregate">The type of the stored aggregate root entity.</typeparam>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Queryable"/>
        </member>
        <member name="P:IStoredEvent`2.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:IStoredEvent`2.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:IStoredEvent`2.Timestamp">
            <summary>
            Gets the UTC timestamp of the event.
            </summary>
        </member>
        <member name="P:IStoredEvent`2.Aggregate">
            <summary>
            Gets the aggregate root associated with this event, if any.
            </summary>
        </member>
        <member name="P:StoredEvent.ActivityId">
            <summary>
            Gets or sets the activity id when this event occurred.
            </summary>
        </member>
        <member name="P:StoredEvent.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:StoredEvent.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:StoredEvent.Timestamp">
            <summary>
            Gets the UTC timestamp of the event.
            </summary>
        </member>
        <member name="P:StoredEvent.Aggregate">
            <summary>
            Gets the aggregate root associated with this event, if any.
            </summary>
        </member>
        <member name="P:StoredEvent.Payload">
            <summary>
            Gets or sets the payload of the event.
            </summary>
        </member>
        <member name="P:StoredEvent.RowVersion">
            <summary>
            Gets or sets the row version, used for ordering events.
            </summary>
        </member>
        <member name="M:QueryableEventStoreExtensions.AggregateIdEquals``4(IQueryableEventStore{``0,``1,``2,``3},``0)">
            <summary>
            Builds the equals expression that can be used to find a matching aggregate 
            in a queryable of <see cref="T:IStoredAggregate`1"/> entities using the <c>FirstOrDefault</c> 
            Linq operator, for example.
            </summary>
            <remarks>
            This is needed because == doesn't compile for TAggregateId and calling CompareTo 
            wouldn't work on most non in-memory stores either.
            </remarks>
        </member>
        <member name="M:QueryableEventStoreExtensions.ToExpression``4(IQueryableEventStore{``0,``1,``2,``3},EventQueryCriteria{``0},System.Func{System.Type,System.String})">
            <summary>
            Converts a criteria object passed to the queryable event store 
            <see cref="M:IEventStore`2.Query(EventQueryCriteria{`0})"/> method 
            into a Linq expression that can be used directly as a filter (<c>Where</c>) 
            over the stored queryable event stream.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <typeparam name="TStoredEvent">The type of the stored event.</typeparam>
            <typeparam name="TStoredAggregate">The type of the stored aggregate.</typeparam>
            <param name="store">The store to provide the query expression for.</param>
            <param name="criteria">The criteria that will be converted to a Linq expression.</param>
            <param name="typeNameConverter">The type name converter to use to transform the <see cref="T:System.Type"/> 
            filters in the criteria object into type name strings that are persisted by the store.</param>
        </member>
        <member name="M:QueryableEventStoreExtensions.CriteriaBuilder`3.Build">
            <summary>
            Builds the expression for the criteria.
            </summary>
        </member>
        <member name="M:QueryableEventStoreExtensions.CriteriaBuilder`3.EventAggregateIdEquals(`0)">
            <devdoc>
            This is needed because == doesn't compile for TAggregateId and calling CompareTo 
            wouldn't work on most non in-memory stores either.
            </devdoc>
        </member>
        <member name="T:AggregateRoot`2">
            <summary>
            Base class for domain classes that raise and optionally consume 
            as their persistence mechanism.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing" />
        </member>
        <member name="M:AggregateRoot`2.AcceptChanges">
            <summary>
            Clears the internal events retrieved from <see cref="M:AggregateRoot`2.GetChanges"/>, 
            signaling that all pending events have been commited.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.GetChanges">
            <summary>
            Gets the pending changes.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.Load(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Loads the the domain object from an even stream.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.Handles``1(System.Action{``0})">
            <summary>
            Configures a handler for an event. 
            </summary>
        </member>
        <member name="M:AggregateRoot`2.Raise``1(``0)">
            <summary>
            Applies a change to the entity state via an event. 
            The derived class should invoke <see cref="M:AggregateRoot`2.Handles``1(System.Action{``0})"/> 
            to configure the handlers for specific types of events. The 
            handlers perform the actual state changes to the entity.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.OnEventHandled(`1)">
            <summary>
            Called whenever an event is handled by the aggregate 
            root. Useful to mark the object as dirty if needed 
            for persistence, beyond the <see cref="P:AggregateRoot`2.HasChanges"/> 
            property which reports if there are new events 
            in the object, but not if it actually handled an 
            event itself at all (changing its internal state).
            </summary>
        </member>
        <member name="P:AggregateRoot`2.Id">
            <summary>
            Gets or sets the identifier of the domain object sourcing the event.
            </summary>
        </member>
        <member name="P:AggregateRoot`2.HasChanges">
            <summary>
            Gets a value indicating whether this aggregate has pending changes.
            </summary>
        </member>
        <member name="T:EventBus`2">
            <summary>
            Default implementation of an <see cref="T:IEventBus`2"/> that 
            invokes handlers as events are published, and where handlers are 
            run in-process (if any handlers are provided).
            </summary>
            <remarks>
            A persistent <see cref="T:IEventStore`2"/> can also be specified 
            to persist events to a store for later playback or auditing.
            <para>
            Handlers with <see cref="P:IEventHandler.IsAsync"/> set to 
            <see langword="true"/> are invoked through the optional 
            async runner delegate passed to the constructor.
            </para>
            </remarks>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="T:IEventBus`2">
            <summary>
            Interface implemented by the component that coordinates 
            event handler invocation when a subscribed event is published.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="M:IEventBus`2.PublishChanges(AggregateRoot{`0,`1})">
            <summary>
            Publishes the pending changes in the given aggregate root, so that all subscribers are notified. 
            </summary>
            <param name="aggregate">The aggregate root which may contain pending changes.</param>
            <remarks>
            Default <see cref="T:EventBus`2"/> also calls 
            <see cref="M:AggregateRoot`2.AcceptChanges"/> after 
            saving the changes to the <see cref="T:IEventStore`2"/> store.
            </remarks>
        </member>
        <member name="M:EventBus`2.#ctor(IEventStore{`0,`1},System.Collections.Generic.IEnumerable{IEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:EventBus`2"/> class with 
            a persistent store for events and the default async runner that enqueues work in the <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="eventStore">The event store to persist events to.</param>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:EventBus`2.#ctor(IEventStore{`0,`1},System.Collections.Generic.IEnumerable{IEventHandler},System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:EventBus`2"/> class with 
            a persistent store for events, a set of event handlers and a specific async runner.
            </summary>
            <param name="eventStore">The event store to persist events to.</param>
            <param name="eventHandlers">The event handlers.</param>
            <param name="asyncActionRunner">The async action runner to use to invoke event handlers 
            that have <see cref="P:IEventHandler.IsAsync"/> set to <see langword="true"/>.</param>
        </member>
        <member name="M:EventBus`2.PublishChanges(AggregateRoot{`0,`1})">
            <summary>
            Publishes the pending changes in the given aggregate root, so that all subscribers are notified. 
            </summary>
            <param name="aggregate">The aggregate root which may contain pending changes.</param>
            <remarks>
            Also persists the aggregate changes to the event store.
            </remarks>
        </member>
        <member name="M:EventBus`2.OnPublished(`0,`1)">
            <summary>
            Called when an event was published to the bus.
            </summary>
            <param name="aggregateId">The identifier of the aggregate root entity that published the event.</param>
            <param name="event">The published event.</param>
        </member>
        <member name="P:EventBus`2.HandlerDescriptor.EventType">
            <summary>
            Gets or sets the type of event payload the handler can process, 
            retrieved from the handler TEvent generic parameter.
            </summary>
        </member>
        <member name="P:EventBus`2.HandlerDescriptor.HandleMethod">
            <summary>
            Gets or sets the handle method that implements 
            the <see cref="T:IEventHandler`2"/>.
            </summary>
        </member>
        <member name="P:EventBus`2.HandlerDescriptor.Handler">
            <summary>
            Gets or sets the handler.
            </summary>
        </member>
        <member name="T:EventHandler`2">
            <summary>
            Base class for domain event handlers that handle a specific type of event.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TEvent">Type of event argument this handler can process.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing" />
        </member>
        <member name="T:IEventHandler`2">
            <summary>
            Base interface for domain event handlers that handle a specific type of event.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TEvent">Type of event argument this handler can process.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing" />
        </member>
        <member name="T:IEventHandler">
            <summary>
            Base interface part of the infrastructure. Concrete 
            handlers should inherit <see cref="T:EventHandler`2"/> 
            or implement <see cref="T:IEventHandler`2"/> instead.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="P:IEventHandler.IsAsync">
            <summary>
            Invocation style hint that the <see cref="T:IEventBus`2"/> implementation
            can use to invoke a handler asynchronously with regards to the event publisher.
            </summary>
        </member>
        <member name="M:IEventHandler`2.Handle(`0,`1)">
            <summary>
            Handles the specified event.
            </summary>
        </member>
        <member name="M:EventHandler`2.Handle(`0,`1)">
            <summary>
            Handles the specified event.
            </summary>
        </member>
        <member name="P:EventHandler`2.IsAsync">
            <summary>
            Invocation style hint that the <see cref="T:IEventBus`2"/> implementation
            can use to invoke a handler asynchronously with regards to the event publisher.
            </summary>
        </member>
        <member name="T:EventQueryCriteria`1">
            <summary>
            Represents the filter criteria for a domain event store query.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="M:EventQueryCriteria`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EventQueryCriteria`1"/> class.
            </summary>
        </member>
        <member name="P:EventQueryCriteria`1.AggregateInstances">
            <summary>
            List of source object type + instance identifier filters. The two filters 
            should be considered by event stores as AND'ed (i.e. 
            events for <c>Product AND Id = 5</c>) and each entry is OR'ed with the 
            others (i.e. <c>(Product AND Id = 5) OR (Order AND Id = 1)</c>.
            </summary>
        </member>
        <member name="P:EventQueryCriteria`1.AggregateTypes">
            <summary>
            List of aggregate root type filters. All types added are OR'ed with the 
            others (i.e. <c>AggregateType == Product OR AggregateType == Order</c>).
            </summary>
            <remarks>
            To filter by aggregate type and identifier, 
            use <see cref="P:EventQueryCriteria`1.AggregateInstances"/> instead.
            </remarks>
        </member>
        <member name="P:EventQueryCriteria`1.EventTypes">
            <summary>
            List of event type filters. All types added are OR'ed with the 
            others (i.e. <c>EventType == ProductCreated OR EventType == ProductPublished</c>).
            </summary>
        </member>
        <member name="P:EventQueryCriteria`1.Since">
            <summary>
            Filters events that happened after the given starting date.
            </summary>
        </member>
        <member name="P:EventQueryCriteria`1.Until">
            <summary>
            Filters events that happened before the given ending date.
            </summary>
        </member>
        <member name="P:EventQueryCriteria`1.IsExclusiveRange">
            <summary>
            If set to <see langword="true"/>, <see cref="P:EventQueryCriteria`1.Since"/> and <see cref="P:EventQueryCriteria`1.Until"/> should 
            be considered as exclusive ranges (excludes values with a matching date). 
            Defaults to <see langword="false"/>, meaning that ranges are inclusive by default.
            </summary>
        </member>
        <member name="T:EventQueryCriteria`1.AggregateFilter">
            <summary>
            Filter criteria containing the aggregate type and identifier. 
            </summary>
        </member>
        <member name="M:EventQueryCriteria`1.AggregateFilter.#ctor(System.Type,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:EventQueryCriteria`1.AggregateFilter"/> class.
            </summary>
            <param name="aggregateType">Type of the event source to filter by.</param>
            <param name="aggregateId">The aggregate root identifier to filter by.</param>
        </member>
        <member name="P:EventQueryCriteria`1.AggregateFilter.AggregateType">
            <summary>
            Gets or sets the type of the aggregate to filter by.
            </summary>
        </member>
        <member name="P:EventQueryCriteria`1.AggregateFilter.AggregateId">
            <summary>
            Gets or sets the aggregate root identifier to filter by.
            </summary>
        </member>
        <member name="T:EventQueryExtension">
            <summary>
            Provides the entry point <see cref="M:EventQueryExtension.Query``2(IEventStore{``0,``1})"/> for a fluent API 
            that makes querying event stores easier.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="M:EventQueryExtension.Query``2(IEventStore{``0,``1})">
            <summary>
            Queries the event store for events that match specified 
            criteria via the returned fluent API methods 
            <see cref="M:EventQueryExtension.IEventQuery`2.For``1"/> and 
            <see cref="M:EventQueryExtension.IEventQuery`2.OfType``1"/>. 
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <param name="store">The domain event store.</param>
        </member>
        <member name="T:EventQueryExtension.IEventQuery`2">
            <summary>
            Provides a fluent API to filter events from the event store. 
            </summary>
            <remarks>
            This interface is returned from the <see cref="M:EventQueryExtension.Query``2(IEventStore{``0,``1})"/> 
            extension method for <see cref="T:IEventStore`2"/>.
            </remarks>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.Execute">
            <summary>
            Executes the query built using the fluent API 
            against the underlying store.
            </summary>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.For``1">
            <summary>
            Filters events that target the given aggregate root type. Can be called 
            multiple times and will filter for any of the specified types (OR operator).
            </summary>
            <typeparam name="TAggregate">The type of the aggregate root to filter events for.</typeparam>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.For``1(`0)">
            <summary>
            Filters events that target the given aggregate root type and identifier. Can be called 
            multiple times and will filter for any of the specified types and ids (OR operator).
            </summary>
            <typeparam name="TAggregate">The type of the aggregate root to filter events for.</typeparam>
            <param name="aggregateId">The aggregate root identifier to filter by.</param>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.OfType``1">
            <summary>
            Filters events that are assignable to the given type. Can be called 
            multiple times and will filter for any of the specified types (OR operator).
            </summary>
            <typeparam name="TEvent">The type of the events to filter.</typeparam>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.Since(System.DateTime)">
            <summary>
            Filters events that happened after the given starting date.
            </summary>
            <param name="when">The starting date to filter by.</param>
            <remarks>
            By default, includes events with the given date, unless the 
            <see cref="M:EventQueryExtension.IEventQuery`2.ExclusiveRange"/> is called to make the range exclusive.
            </remarks>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.Until(System.DateTime)">
            <summary>
            Filters events that happened before the given ending date.
            </summary>
            <param name="when">The ending date to filter by.</param>
            <remarks>
            By default, includes events with the given date, unless the 
            <see cref="M:EventQueryExtension.IEventQuery`2.ExclusiveRange"/> is called to make the range exclusive.
            </remarks>
        </member>
        <member name="M:EventQueryExtension.IEventQuery`2.ExclusiveRange">
            <summary>
            Makes the configured <see cref="M:EventQueryExtension.IEventQuery`2.Since(System.DateTime)"/> and/or <see cref="M:EventQueryExtension.IEventQuery`2.Until(System.DateTime)"/> dates 
            exclusive, changing the default behavior which is to be inclusive.
            </summary>
        </member>
        <member name="M:EventQueryExtension.EventQuery`2.GetInheritance``1">
            <devdoc>
            Returns a list of the T and all its base types until an 
            abstract base class is found (can't be persisted therefore) 
            or System.Object is found (events can't be System.Object either).
            </devdoc>
        </member>
        <member name="T:ITimestamped">
            <summary>
            Minimum requirement interface for events that are persisted 
            by the event store, as events need to be timestamped.
            </summary>
        </member>
        <member name="P:ITimestamped.Timestamp">
            <summary>
            Gets the timestamp of the event.
            </summary>
        </member>
        <member name="T:DictionaryGetOrAdd">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist. 
            </summary>
        </member>
        <member name="M:DictionaryGetOrAdd.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist. 
            No locking occurs, so the value may be calculated twice on concurrent scenarios. If you need 
            concurrency assurances, use a concurrent dictionary instead.
            </summary>
            <nuget id="netfx-System.Collections.Generic.DictionaryGetOrAdd"/>
            <param name="dictionary" this="true">The dictionary where the key/value pair will be added</param>
            <param name="key">The key to be added to the dictionary</param>
            <param name="valueFactory">The value factory</param>
        </member>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
        </member>
        <member name="T:ISerializer">
            <summary>
            Implementations of this interface are able to serialize and 
            deserialize an object graph from a stream.
            </summary>
            <nuget id="netfx-System.ISerializer" />
        </member>
        <member name="M:ISerializer.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserializes an object graph from the given stream.
            </summary>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:ISerializer.Serialize``1(System.IO.Stream,``0)">
            <summary>
            Serializes the provided object graph and writes it to the storage.
            </summary>
            <param name="stream">The stream to serialize the graph into.</param>
            <param name="graph">The object graph to be serialized.</param>
        </member>
        <member name="T:ExpressionCombiner">
            <summary>
            Combines linq expressions using logic operators And and Or.
            </summary>
            <remarks>
            This code was taken from the MSDN Blog meek: LINQ to Entities: Combining Predicates
            http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx
            </remarks>
            <nuget id="netfx-System.Linq.Expressions.ExpressionCombiner" />
        </member>
        <member name="T:SequentialGuid">
            <summary>
            A safe managed sequential GUID generator (or Comb) that improves 
            performance of GUID-style identifiers used in persistence.
            </summary>
            <devdoc>Source from NHibernate Guid Comb generator: http://nhibernate.svn.sourceforge.net/viewvc/nhibernate/trunk/nhibernate/src/NHibernate/Id/GuidCombGenerator.cs </devdoc>
            <nuget id="netfx-System.SequentialGuid" />
        </member>
        <member name="M:SequentialGuid.NewGuid">
            <summary>
            Creates a new sequential guid.
            </summary>
        </member>
        <member name="T:SerializationExtensions">
            <summary>
            Provides simpler serialization and deserialization extension methods 
            for <see cref="T:ISerializer"/> over a byte array.
            </summary>
        </member>
        <member name="M:SerializationExtensions.Deserialize``1(ISerializer,System.Byte[])">
            <summary>
            Deserializes an object graph of type <typeparamref name="T"/> from 
            the given byte array.
            </summary>
            <typeparam name="T">The type of object graph to deserialize.</typeparam>
            <param name="serializer">The serializer to use.</param>
            <param name="serialized">The serialized byte array.</param>
        </member>
        <member name="M:SerializationExtensions.Serialize``1(ISerializer,``0)">
            <summary>
            Serializes the given object graph as a byte array.
            </summary>
            <typeparam name="T">The type of object graph to serialize, inferred by the
            compiler from the passed-in <paramref name="graph"/>.</typeparam>
            <param name="serializer">The serializer to use.</param>
            <param name="graph">The object graph to serialize.</param>
            <returns>The byte array containing the serialized object graph.</returns>
        </member>
    </members>
</doc>
