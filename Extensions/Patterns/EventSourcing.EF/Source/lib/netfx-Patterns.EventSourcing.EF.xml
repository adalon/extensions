<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:StoredEvent`1">
            <devdoc>
            Extends the partial class for a concrete 
            event sourcing store, providing the payload 
            as a string that will be populated with Json text.
            </devdoc>
            <summary>
            Represents a persisted event in the <see cref="T:DomainEventStore`2"/> store. 
            Must be inherited by a concrete non-generic class that specifies the type of <typeparamref name="TAggregateId"/>.
            </summary>
            <typeparam name="TAggregateId">The type of identifiers used by the aggregate roots.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.EF"/>
        </member>
        <member name="T:IStoredEvent`1">
            <summary>
            Represents a persisted event in an event store.
            </summary>
            <remarks>
            The core interface does not expose the event payload, 
            as its representation as well as specific storage type
            and serialization/deserialization can vary wildly 
            across store implementation. Imposing a particular 
            representation via this interface would be unnecessarily 
            restrictive and is not needed for the rest of the APIs.
            </remarks>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="P:IStoredEvent`1.AggregateId">
            <summary>
            Gets the aggregate root identifier that the event applies to.
            </summary>
        </member>
        <member name="P:IStoredEvent`1.AggregateType">
            <summary>
            Gets the type of the the domain object that this event applies to.
            </summary>
        </member>
        <member name="P:IStoredEvent`1.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:IStoredEvent`1.Timestamp">
            <summary>
            Gets the UTC timestamp of the event.
            </summary>
        </member>
        <member name="P:StoredEvent`1.Payload">
            <summary>
            Gets or sets the Json payload of the event.
            </summary>
        </member>
        <member name="P:StoredEvent`1.Id">
            <summary>
            Event identifier in the database.
            </summary>
        </member>
        <member name="P:StoredEvent`1.AggregateId">
            <summary>
            Gets the aggregate id that the event applies to.
            </summary>
        </member>
        <member name="P:StoredEvent`1.AggregateType">
            <summary>
            Gets the type of the aggregate root that this event applies to.
            </summary>
        </member>
        <member name="P:StoredEvent`1.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:StoredEvent`1.Timestamp">
            <summary>
            Gets the UTC timestamp of the event.
            </summary>
        </member>
        <member name="T:StoredEventCriteria`1">
            <summary>
            Represents the filter criteria for a domain event store query.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:StoredEventCriteria`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StoredEventCriteria`1"/> class.
            </summary>
        </member>
        <member name="P:StoredEventCriteria`1.AggregateInstances">
            <summary>
            List of source object type + instance identifier filters. The two filters 
            should be considered by event stores as AND'ed (i.e. 
            events for <c>Product AND Id = 5</c>) and each entry is OR'ed with the 
            others (i.e. <c>(Product AND Id = 5) OR (Order AND Id = 1)</c>.
            </summary>
        </member>
        <member name="P:StoredEventCriteria`1.AggregateTypes">
            <summary>
            List of aggregate root type filters. All types added are OR'ed with the 
            others (i.e. <c>AggregateType == Product OR AggregateType == Order</c>).
            </summary>
            <remarks>
            To filter by aggregate type and identifier, 
            use <see cref="P:StoredEventCriteria`1.AggregateInstances"/> instead.
            </remarks>
        </member>
        <member name="P:StoredEventCriteria`1.EventTypes">
            <summary>
            List of event type filters. All types added are OR'ed with the 
            others (i.e. <c>EventType == ProductCreated OR EventType == ProductPublished</c>).
            </summary>
        </member>
        <member name="P:StoredEventCriteria`1.Since">
            <summary>
            Filters events that happened after the given starting date.
            </summary>
        </member>
        <member name="P:StoredEventCriteria`1.Until">
            <summary>
            Filters events that happened before the given ending date.
            </summary>
        </member>
        <member name="P:StoredEventCriteria`1.IsExclusiveDateRange">
            <summary>
            If set to <see langword="true"/>, <see cref="P:StoredEventCriteria`1.Since"/> and <see cref="P:StoredEventCriteria`1.Until"/> should 
            be considered as exclusive date ranges (excludes values with a matching date). 
            Defaults to <see langword="false"/>, meaning that ranges are inclusive by default.
            </summary>
        </member>
        <member name="T:DomainEventStore`3">
            <summary>
            Implements an event store on top of EntityFramework 4.1
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <typeparam name="TStoredEvent">The type of the stored event, which must inherit from <see cref="T:StoredEvent`1"/> for a specific <typeparamref name="TAggregateId"/>.</typeparam>
            <remarks>
            This class is abstract and must be inherited by a concrete 
            store class that provides a fixed type for the <typeparamref name="TAggregateId"/> and 
            <typeparamref name="TStoredEvent"/> type parameters, as entity framework cannot 
            work with generic entities.
            </remarks>
            <example>
            The following is an example of a concrete event store leveraging this class:
            <code>
            public class DomainEventStore : DomainEventStore&lt;Guid, DomainEvent, StoredEvent&gt;
            {
            	public DomainEventStore(string nameOrConnectionString)
            		: base(nameOrConnectionString)
            	{
            	}
            }
            
            public class StoredEvent : StoredEvent&lt;Guid&gt; { }
            </code>
            </example>
            <nuget id="netfx-Patterns.EventSourcing.EF"/>
            <devdoc>
            Extends the partial class for a concrete 
            event sourcing store, providing the behavior 
            to serialize events as a Json string.
            </devdoc>
        </member>
        <member name="T:IDomainEventStore`2">
            <summary>
            Interface implemented by domain event stores.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:IDomainEventStore`2.Persist(AggregateRoot{`0,`1},`1)">
            <summary>
            Notifies the store that the given event raised by the given sender 
            should be persisted when <see cref="M:IDomainEventStore`2.Commit"/> is called.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The instance containing the event data.</param>
        </member>
        <member name="M:IDomainEventStore`2.Query(StoredEventCriteria{`0})">
            <summary>
            Queries the event store for events that match the given criteria.
            </summary>
            <remarks>
            This is the only low-level querying method that stores need to implement. 
            <para>
            As a facility for stores that persist events in an <see cref="T:System.Linq.IQueryable`1"/> 
            queryable object, the <see cref="T:StoredEventCriteria`1"/> object 
            can be converted to an expression using the <see cref="M:StoredEventCriteriaExtensions.ToExpression``1(StoredEventCriteria{``0},System.Func{System.Type,System.String})"/> 
            extension method, making the query implementation trivial in that case.
            </para>
            <para>
            The more user-friendly querying API in <see cref="T:IDomainEventQuery`2"/> 
            leverages this method internally and therefore can be used by any 
            event store implementation. It's accessible by executing the 
            <see cref="M:DomainEventQueryExtensions.Query``2(IDomainEventStore{``0,``1})"/> over the 
            store instance.
            </para>
            </remarks>
        </member>
        <member name="M:IDomainEventStore`2.Commit">
            <summary>
            Persists all <see cref="M:IDomainEventStore`2.Persist(AggregateRoot{`0,`1},`1)"/>s performed so far, effectively commiting 
            the changes to the underlying store in a unit-of-work style.
            </summary>
        </member>
        <member name="P:IDomainEventStore`2.TypeNameConverter">
            <summary>
            Gets or sets the function that converts a <see cref="T:System.Type"/> to 
            its string representation in the store. Used to calculate the 
            values of <see cref="P:IStoredEvent`1.AggregateType"/> and 
            <see cref="P:IStoredEvent`1.EventType"/>.
            </summary>
        </member>
        <member name="M:DomainEventStore`3.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventStore`2"/> class.
            </summary>
            <param name="nameOrConnectionString">The name or connection string.</param>
        </member>
        <member name="M:DomainEventStore`3.Query(StoredEventCriteria{`0})">
            <summary>
            Queries the event store for events that match the given criteria.
            </summary>
        </member>
        <member name="M:DomainEventStore`3.Persist(AggregateRoot{`0,`1},`1)">
            <summary>
            Saves the given event raised by the given sender aggregate root.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The instance containing the event data.</param>
        </member>
        <member name="M:DomainEventStore`3.Commit">
            <summary>
            Saves the changes to the underlying database.
            </summary>
        </member>
        <member name="P:DomainEventStore`3.TypeNameConverter">
            <summary>
            Gets or sets the function that converts a <see cref="T:System.Type"/> to 
            its string representation in the store. Used to calculate the 
            values of <see cref="P:IStoredEvent`1.AggregateType"/> and 
            <see cref="P:IStoredEvent`1.EventType"/>.
            </summary>
        </member>
        <member name="P:DomainEventStore`3.SystemClock">
            <summary>
            Gets or sets the system clock to use to calculate the timestamp
            of persisted events.
            </summary>
        </member>
        <member name="P:DomainEventStore`3.Events">
            <summary>
            Gets or sets the events persisted in the store.
            </summary>
        </member>
        <member name="T:IDomainEventQuery`2">
            <summary>
            Provides a fluent API to filter events from the event store. 
            </summary>
            <remarks>
            This interface is returned from the <see cref="M:DomainEventQueryExtensions.Query``2(IDomainEventStore{``0,``1})"/> 
            extension method for <see cref="T:IDomainEventStore`2"/>.
            </remarks>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:IDomainEventQuery`2.For``1">
            <summary>
            Filters events that target the given aggregate root type. Can be called 
            multiple times and will filter for any of the specified types (OR operator).
            </summary>
            <typeparam name="TAggregate">The type of the aggregate root to filter events for.</typeparam>
        </member>
        <member name="M:IDomainEventQuery`2.For``1(`0)">
            <summary>
            Filters events that target the given aggregate root type and identifier. Can be called 
            multiple times and will filter for any of the specified types and ids (OR operator).
            </summary>
            <typeparam name="TAggregate">The type of the aggregate root to filter events for.</typeparam>
            <param name="aggregateId">The aggregate root identifier to filter by.</param>
        </member>
        <member name="M:IDomainEventQuery`2.OfType``1">
            <summary>
            Filters events that are assignable to the given type. Can be called 
            multiple times and will filter for any of the specified types (OR operator).
            </summary>
            <typeparam name="TEventArgs">The type of the events to filter.</typeparam>
        </member>
        <member name="M:IDomainEventQuery`2.Since(System.DateTime)">
            <summary>
            Filters events that happened after the given starting date.
            </summary>
            <param name="when">The starting date to filter by.</param>
            <remarks>
            By default, includes events with the given date, unless the 
            <see cref="M:IDomainEventQuery`2.ExclusiveDateRange"/> is called to make the range exclusive.
            </remarks>
        </member>
        <member name="M:IDomainEventQuery`2.Until(System.DateTime)">
            <summary>
            Filters events that happened before the given ending date.
            </summary>
            <param name="when">The ending date to filter by.</param>
            <remarks>
            By default, includes events with the given date, unless the 
            <see cref="M:IDomainEventQuery`2.ExclusiveDateRange"/> is called to make the range exclusive.
            </remarks>
        </member>
        <member name="M:IDomainEventQuery`2.ExclusiveDateRange">
            <summary>
            Makes the configured <see cref="M:IDomainEventQuery`2.Since(System.DateTime)"/> and/or <see cref="M:IDomainEventQuery`2.Until(System.DateTime)"/> dates 
            exclusive, changing the default behavior which is to be inclusive.
            </summary>
        </member>
        <member name="P:IDomainEventQuery`2.Criteria">
            <summary>
            Gets the criteria that was built using the fluent API so far.
            </summary>
        </member>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
        </member>
        <member name="T:StoredEventAggregateFilter`1">
            <summary>
            Filter criteria containing the aggregate type and identifier, 
            used by the <see cref="T:StoredEventCriteria`1"/>.
            </summary>
        </member>
        <member name="M:StoredEventAggregateFilter`1.#ctor(System.Type,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:StoredEventAggregateFilter`1"/> class.
            </summary>
            <param name="aggregateType">Type of the event source to filter by.</param>
            <param name="aggregateId">The aggregate root identifier to filter by.</param>
        </member>
        <member name="P:StoredEventAggregateFilter`1.AggregateType">
            <summary>
            Gets or sets the type of the aggregate to filter by.
            </summary>
        </member>
        <member name="P:StoredEventAggregateFilter`1.AggregateId">
            <summary>
            Gets or sets the aggregate root identifier to filter by.
            </summary>
        </member>
        <member name="T:IClock">
            <summary>
            Represents a clock.
            </summary>
            <devdoc>
            To make this interface public, create a partial interface 
            definition in another code file and declare it as public.
            This allows a seamless updates experience.
            </devdoc>
            <nuget id="netfx-System.Clock" />
        </member>
        <member name="P:IClock.Now">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="P:IClock.UtcNow">
            <summary>
            Current date and time in UTC format.
            </summary>
        </member>
        <member name="T:DomainEventHandler">
            <summary>
            Base class part of the infrastructure. Concrete 
            handlers should inherit <see cref="T:DomainEventHandler`2"/> instead.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="T:IDomainEventHandler">
            <summary>
            Base interface part of the infrastructure. Concrete 
            handlers should inherit <see cref="T:DomainEventHandler`2"/> 
            or implement <see cref="T:IDomainEventHandler`2"/> instead.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="P:IDomainEventHandler.IsAsync">
            <summary>
            Invocation style hint that the <see cref="T:IDomainEventBus`2"/> implementation
            can use to invoke a handler asynchronously with regards to the event publisher.
            </summary>
        </member>
        <member name="P:IDomainEventHandler.EventType">
            <summary>
            Gets the type of the event argument this handler can process.
            </summary>
        </member>
        <member name="P:DomainEventHandler.IsAsync">
            <summary>
            Invocation style hint that the <see cref="T:IDomainEventBus`2"/> implementation
            can use to invoke a handler asynchronously with regards to the event publisher.
            </summary>
        </member>
        <member name="P:DomainEventHandler.EventType">
            <summary>
            Gets the type of the event argument this handler can process.
            </summary>
        </member>
        <member name="T:DomainEventHandler`2">
            <summary>
            Base class for domain event handlers that handle a specific type of event.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TEventArgs">Type of event argument this handler can process.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core" />
        </member>
        <member name="T:IDomainEventHandler`2">
            <summary>
            Base interface for domain event handlers that handle a specific type of event.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TEventArgs">Type of event argument this handler can process.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core" />
        </member>
        <member name="M:IDomainEventHandler`2.Handle(`0,`1)">
            <summary>
            Handles the specified event.
            </summary>
        </member>
        <member name="M:DomainEventHandler`2.Handle(`0,`1)">
            <summary>
            Handles the specified event.
            </summary>
        </member>
        <member name="P:DomainEventHandler`2.EventType">
            <summary>
            Gets the type of the event this handler can process, which equals 
            the generic type parameter of <see cref="T:DomainEventHandler`2"/>.
            </summary>
        </member>
        <member name="T:SystemClock">
            <summary>
            Default implementation of <see cref="T:IClock"/> that exposes 
            the <see cref="T:System.DateTime"/> default members.
            </summary>
            <devdoc>
            To make this class public, create a partial class
            definition in another code file and declare it as public.
            This allows a seamless updates experience.
            </devdoc>
            <nuget id="netfx-System.Clock"/>
        </member>
        <member name="P:SystemClock.Instance">
            <summary>
            Gets the singleton instance of the system clock.
            </summary>
        </member>
        <member name="P:SystemClock.Now">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="P:SystemClock.UtcNow">
            <summary>
            Current date and time in UTC format.
            </summary>
        </member>
        <member name="T:DomainEventQueryExtensions">
            <summary>
            Provides the entry point <see cref="M:DomainEventQueryExtensions.Query``2(IDomainEventStore{``0,``1})"/> for a fluent API 
            that makes querying event stores easier.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:DomainEventQueryExtensions.Query``2(IDomainEventStore{``0,``1})">
            <summary>
            Queries the event store for events that match specified 
            criteria via the returned fluent API methods 
            <see cref="M:IDomainEventQuery`2.For``1"/> and 
            <see cref="M:IDomainEventQuery`2.OfType``1"/>. 
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <param name="store">The domain event store.</param>
        </member>
        <member name="M:DomainEventQueryExtensions.DomainEventQuery`2.GetInheritance``1">
            <devdoc>
            Returns a list of the T and all its base types until an 
            abstract base class is found (can't be persisted therefore) 
            or System.Object is found (events can't be System.Object either).
            </devdoc>
        </member>
        <member name="T:AggregateRoot`2">
            <summary>
            Base class for domain classes that raise and optionally consume 
            as their persistence mechanism.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core" />
        </member>
        <member name="M:AggregateRoot`2.AcceptChanges">
            <summary>
            Clears the internal events retrieved from <see cref="M:AggregateRoot`2.GetChanges"/>, 
            signaling that all pending events have been commited.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.GetChanges">
            <summary>
            Gets the pending changes.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.Load(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Loads the the domain object sourcing the event state from an even stream.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.Handles``1(System.Action{``0})">
            <summary>
            Configures a handler for an event.
            </summary>
        </member>
        <member name="M:AggregateRoot`2.Raise``1(``0)">
            <summary>
            Applies a change to the entity state via an event. 
            The derived class should invoke <see cref="M:AggregateRoot`2.Handles``1(System.Action{``0})"/> 
            to configure the handlers for specific types of events. The 
            handlers perform the actual state changes to the entity.
            </summary>
        </member>
        <member name="P:AggregateRoot`2.Id">
            <summary>
            Gets or sets the identifier of the domain object sourcing the event.
            </summary>
        </member>
        <member name="T:ExpressionCombiner">
            <summary>
            Combines linq expressions using logic operators And and Or.
            </summary>
            <remarks>
            This code was taken from the MSDN Blog meek: LINQ to Entities: Combining Predicates
            http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx
            </remarks>
            <nuget id="netfx-System.Linq.Expressions.ExpressionCombiner" />
        </member>
        <member name="T:StoredEventCriteriaExtensions">
            <summary>
            Provides helper conversion of <see cref="T:StoredEventCriteria`1"/> 
            to a Linq <see cref="T:System.Linq.Expressions.Expression"/> that can be applied directly by 
            stores that have Linq providers to the underlying event stream in 
            the form of <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:IStoredEvent`1"/>.
            </summary>
        </member>
        <member name="M:StoredEventCriteriaExtensions.ToExpression``1(StoredEventCriteria{``0},System.Func{System.Type,System.String})">
            <summary>
            Converts the criteria object into an expression tree that can be used to
            run queries against an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <param name="criteria">The criteria object to convert to a Linq expression.</param>
            <param name="typeNameConverter">The function that converts a <see cref="T:System.Type"/> to
            its string representation in the store. Used to calculate the
            values of <see cref="P:IStoredEvent`1.AggregateType"/> and
            <see cref="P:IStoredEvent`1.EventType"/>.</param>
            <returns>
            The criteria object converted to an expression that can be
            used to query an <see cref="T:System.Linq.IQueryable`1"/> if the store
            implementation provides one.
            </returns>
        </member>
        <member name="M:StoredEventCriteriaExtensions.StoredEventCriteriaBuilder`1.BuildEquals(`0)">
            <devdoc>
            This is needed because == doesn't compile for TAggregateId and calling CompareTo 
            wouldn't work on most non in-memory stores either.
            </devdoc>
        </member>
        <member name="M:StoredEventCriteriaExtensions.StoredEventCriteriaBuilder`1.Build">
            <summary>
            Builds the expression for the criteria.
            </summary>
        </member>
        <member name="T:DomainEventStore`2">
            <summary>
            Provides the <see cref="P:DomainEventStore`2.None"/> empty store for use 
            when no store is needed.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:DomainEventStore`2.#cctor">
            <summary>
            Initializes the <see cref="P:DomainEventStore`2.None"/> null object 
            pattern property.
            </summary>
        </member>
        <member name="P:DomainEventStore`2.None">
            <summary>
            Gets a default domain event store implementation that 
            does nothing (a.k.a. Null Object Pattern).
            </summary>
        </member>
        <member name="T:IDomainEventBus`2">
            <summary>
            Interface implemented by the component that coordinates 
            event handler invocation when a subscribed event is published.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:IDomainEventBus`2.Publish(AggregateRoot{`0,`1},`1)">
            <summary>
            Publishes the specified event to the bus so that all subscribers are notified.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event payload.</param>
        </member>
        <member name="T:DomainEventBus`2">
            <summary>
            Default implementation of an <see cref="T:IDomainEventBus`2"/> that 
            invokes handlers as events are published, and where handlers are 
            run in-process (if any handlers are provided).
            </summary>
            <remarks>
            A persistent <see cref="T:IDomainEventStore`2"/> can also be specified 
            to persist events to a store for later playback or auditing.
            <para>
            Handlers with <see cref="P:IDomainEventHandler.IsAsync"/> set to 
            <see langword="true"/> are invoked through the optional 
            async runner delegate passed to the constructor.
            </para>
            </remarks>
            <typeparam name="TAggregateId">The type of identifier used by the aggregate roots in the domain.</typeparam>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing.Core"/>
        </member>
        <member name="M:DomainEventBus`2.#cctor">
            <summary>
            Initializes the <see cref="P:DomainEventBus`2.None"/> null object 
            pattern property.
            </summary>
        </member>
        <member name="M:DomainEventBus`2.#ctor(IDomainEventStore{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus`2"/> class
            with a persistent store for events and no in-memory handlers.
            </summary>
            <param name="eventStore">The event store to persist events to.</param>
        </member>
        <member name="M:DomainEventBus`2.#ctor(System.Collections.Generic.IEnumerable{IDomainEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus`2"/> class with 
            the default async runner that enqueues work in the <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:DomainEventBus`2.#ctor(IDomainEventStore{`0,`1},System.Collections.Generic.IEnumerable{IDomainEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus`2"/> class with 
            a persistent store for events and the default async runner that enqueues work in the <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="eventStore">The event store to persist events to.</param>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:DomainEventBus`2.#ctor(System.Collections.Generic.IEnumerable{IDomainEventHandler},System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus`2"/> class with 
            the given async runner.
            </summary>
            <param name="eventHandlers">The event handlers.</param>
            <param name="asyncActionRunner">The async action runner to use to invoke event handlers 
            that have <see cref="P:DomainEventHandler.IsAsync"/> set to <see langword="true"/>.</param>
        </member>
        <member name="M:DomainEventBus`2.#ctor(IDomainEventStore{`0,`1},System.Collections.Generic.IEnumerable{IDomainEventHandler},System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus`2"/> class with 
            a persistent store for events, a set of event handlers and a specific async runner.
            </summary>
            <param name="eventStore">The event store to persist events to.</param>
            <param name="eventHandlers">The event handlers.</param>
            <param name="asyncActionRunner">The async action runner to use to invoke event handlers 
            that have <see cref="P:DomainEventHandler.IsAsync"/> set to <see langword="true"/>.</param>
        </member>
        <member name="M:DomainEventBus`2.Publish(AggregateRoot{`0,`1},`1)">
            <summary>
            Publishes the specified event to the bus so that all subscribers are notified.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="args">The event payload.</param>
        </member>
        <member name="P:DomainEventBus`2.None">
            <summary>
            Gets a default domain event bus implementation that 
            does nothing (a.k.a. Null Object Pattern).
            </summary>
        </member>
        <member name="T:DomainEventBus`2.NullBus">
            <summary>
            Provides a null <see cref="T:IDomainEventBus`2"/> implementation 
            for use when no events have been configured.
            </summary>
        </member>
        <member name="M:DomainEventBus`2.NullBus.Publish(AggregateRoot{`0,`1},`1)">
            <summary>
            Does nothing.
            </summary>
        </member>
    </members>
</doc>
