<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:AggregateRoot`1">
            <summary>
            Base class for aggregate roots that use events to apply state 
            changes and notify consumers on an <see cref="T:IDomainEventBus"/>.
            </summary>
            <typeparam name="TId">The type of identifier used by the aggregate root.</typeparam>
        </member>
        <member name="F:AggregateRoot`1.appliersCache">
            <summary>
            This cache is the only bit of complexity in the whole thing, and it's 
            basically an optimization to avoid dynamic and private reflection to 
            happen at runtime. This cache contains a generated lambda to apply 
            events from history, and is only built if you ever use the <see cref="M:AggregateRoot`1.LoadFrom(System.Collections.Generic.IEnumerable{DomainEvent})"/> 
            method. Otherwise, it has no impact whatesoever in your entities performance, 
            as the cache is never eagerly built.
            </summary>
        </member>
        <member name="M:AggregateRoot`1.AcceptChanges">
            <summary>
            Clears the internal events retrieved from <see cref="M:AggregateRoot`1.GetChanges"/>, 
            signaling that all pending events have been commited.
            </summary>
        </member>
        <member name="M:AggregateRoot`1.GetChanges">
            <summary>
            Gets the pending changes.
            </summary>
        </member>
        <member name="M:AggregateRoot`1.LoadFrom(System.Collections.Generic.IEnumerable{DomainEvent})">
            <summary>
            Loads the aggregate root state from an even stream.
            </summary>
        </member>
        <member name="M:AggregateRoot`1.ApplyEvent``1(``0,System.Action{``0})">
            <summary>
            Applies a change to the entity state via an event. 
            The derived class should provide a method called <c>Apply</c> 
            receiving the concrete type of event, where state 
            changes are performed to the entity.
            </summary>
        </member>
        <member name="M:AggregateRoot`1.EnsureApplyReflectionCache">
            <summary>
            Builds the reflection-based cache of Apply-style methods 
            for the current instance if needed.
            </summary>
        </member>
        <member name="P:AggregateRoot`1.Id">
            <summary>
            Gets or sets the aggregate root identifier.
            </summary>
        </member>
        <member name="T:DomainEvent">
            <summary>
            Base class part of the infrastructure. Concrete 
            events should inherit <see cref="T:DomainEvent`1"/> instead.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="T:DomainEvent`1">
            <summary>
            Base class for domain events.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing" />
        </member>
        <member name="M:DomainEvent`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEvent`1"/> class 
            with the given aggregate root identifier.
            </summary>
        </member>
        <member name="P:DomainEvent`1.AggregateId">
            <summary>
            Gets the identifier of the aggregate root that published this event.
            </summary>
        </member>
        <member name="T:DomainEventBus">
            <summary>
            Default implementation of an <see cref="T:IDomainEventBus"/> that 
            invokes handlers as events are published.
            <para>
            Handlers with <see cref="P:DomainEventHandler.IsAsync"/> set to 
            <see langword="true"/> are invoked through the optional 
            async runner delegate passed to the constructor.
            </para>
            </summary>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="T:IDomainEventBus">
            <summary>
            Interface implemented by the component that coordinates 
            event handler invocation when a subscribed event is published.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing" />
        </member>
        <member name="M:IDomainEventBus.Publish``1(AggregateRoot{``0},DomainEvent)">
            <summary>
            Publishes the specified event to the bus so that all subscribers are notified.
            </summary>
            <typeparam name="TAggregateId">The type of identifier used by the event sender. Inferred by the compiler from the <paramref name="sender"/> argument.</typeparam>
            <param name="sender">The sender of the event.</param>
            <param name="event">The event payload.</param>
        </member>
        <member name="M:DomainEventBus.#cctor">
            <summary>
            Initializes the <see cref="P:DomainEventBus.None"/> null object 
            pattern property.
            </summary>u
        </member>
        <member name="M:DomainEventBus.#ctor(System.Collections.Generic.IEnumerable{DomainEventHandler})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus"/> class with 
            the default async runner that enqueues work in the <see cref="T:System.Threading.ThreadPool"/>.
            </summary>
            <param name="eventHandlers">The event handlers.</param>
        </member>
        <member name="M:DomainEventBus.#ctor(System.Collections.Generic.IEnumerable{DomainEventHandler},System.Action{System.Action})">
            <summary>
            Initializes a new instance of the <see cref="T:DomainEventBus"/> class with 
            the given async runner.
            </summary>
            <param name="eventHandlers">The event handlers.</param>
            <param name="asyncActionRunner">The async action runner to use to invoke event handlers 
            that have <see cref="P:DomainEventHandler.IsAsync"/> set to <see langword="true"/>.</param>
        </member>
        <member name="M:DomainEventBus.Publish``1(AggregateRoot{``0},DomainEvent)">
            <summary>
            Publishes the specified event to the bus so that all subscribers are notified.
            </summary>
            <typeparam name="TId">The type of identifier used by the event sender. Inferred by the compiler from the <paramref name="sender"/> argument.</typeparam>
            <param name="sender">The sender of the event.</param>
            <param name="event">The event payload.</param>
        </member>
        <member name="P:DomainEventBus.None">
            <summary>
            Gets a default domain event bus implementation that 
            does nothing (a.k.a. Null Object Pattern).
            </summary>
        </member>
        <member name="T:DomainEventBus.NullBus">
            <summary>
            Provides a null <see cref="T:IDomainEventBus"/> implementation 
            for use when no events have been configured.
            </summary>
        </member>
        <member name="M:DomainEventBus.NullBus.Publish``1(AggregateRoot{``0},DomainEvent)">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:DomainEventHandler">
            <summary>
            Base class part of the infrastructure. Concrete 
            handlers should inherit <see cref="T:DomainEventHandler`1"/> instead.
            </summary>
            <nuget id="netfx-Patterns.EventSourcing"/>
        </member>
        <member name="P:DomainEventHandler.IsAsync">
            <summary>
            Invocation style hint that the <see cref="T:IDomainEventBus"/> implementation
            can use to invoke a handler asynchronously with regards to the event publisher.
            </summary>
        </member>
        <member name="P:DomainEventHandler.EventType">
            <summary>
            Gets the type of the event this handler can process.
            </summary>
        </member>
        <member name="T:DomainEventHandler`1">
            <summary>
            Base class for domain event handlers that handle a specific type of event.
            </summary>
            <typeparam name="T">Type of event this handler can process.</typeparam>
            <nuget id="netfx-Patterns.EventSourcing" />
        </member>
        <member name="M:DomainEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified event.
            </summary>
        </member>
        <member name="P:DomainEventHandler`1.EventType">
            <summary>
            Gets the type of the event this handler can process, which equals 
            the generic type parameter of <see cref="T:DomainEventHandler`1"/>.
            </summary>
        </member>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
        </member>
    </members>
</doc>
