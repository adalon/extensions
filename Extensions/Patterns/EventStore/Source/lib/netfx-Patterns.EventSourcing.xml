<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:EventQueryExtensions">
            <summary>
            Provides the entry point <see cref="M:EventQueryExtensions.Query``1(IEventStore{``0})"/> for a fluent API 
            that makes querying event stores easier.
            </summary>
            <nuget id="netfx-Patterns.EventStore"/>
        </member>
        <member name="M:EventQueryExtensions.Query``1(IEventStore{``0})">
            <summary>
            Queries the event store for events that match specified 
            criteria via the returned fluent API methods 
            <see cref="M:IEventQuery`1.OfType``1"/>. 
            </summary>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the system.</typeparam>
            <param name="store">The domain event store.</param>
        </member>
        <member name="T:IEventQuery`1">
            <summary>
            Provides a fluent API to filter events from the event store. 
            </summary>
            <remarks>
            This interface is returned from the <see cref="M:EventQueryExtensions.Query``1(IEventStore{``0})"/> 
            extension method for <see cref="T:IEventStore`1"/>.
            </remarks>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the system.</typeparam>
            <nuget id="netfx-Patterns.EventStore"/>
        </member>
        <member name="M:IEventQuery`1.OfType``1">
            <summary>
            Filters events that are assignable to the given type. Can be called 
            multiple times and will filter for any of the specified types (OR operator).
            </summary>
            <typeparam name="TEvent">The type of the events to filter.</typeparam>
        </member>
        <member name="M:IEventQuery`1.Since(System.DateTime)">
            <summary>
            Filters events that happened after the given starting date.
            </summary>
            <param name="when">The starting date to filter by.</param>
            <remarks>
            By default, includes events with the given date, unless the 
            <see cref="M:IEventQuery`1.ExclusiveRange"/> is called to make the range exclusive.
            </remarks>
        </member>
        <member name="M:IEventQuery`1.Until(System.DateTime)">
            <summary>
            Filters events that happened before the given ending date.
            </summary>
            <param name="when">The ending date to filter by.</param>
            <remarks>
            By default, includes events with the given date, unless the 
            <see cref="M:IEventQuery`1.ExclusiveRange"/> is called to make the range exclusive.
            </remarks>
        </member>
        <member name="M:IEventQuery`1.ExclusiveRange">
            <summary>
            Makes the configured <see cref="M:IEventQuery`1.Since(System.DateTime)"/> and/or <see cref="M:IEventQuery`1.Until(System.DateTime)"/> dates 
            exclusive, changing the default behavior which is to be inclusive.
            </summary>
        </member>
        <member name="P:IEventQuery`1.Criteria">
            <summary>
            Gets the criteria that was built using the fluent API so far.
            </summary>
        </member>
        <member name="T:EventStore`1">
            <summary>
            Provides the <see cref="P:EventStore`1.None"/> empty store for use 
            when no store is needed.
            </summary>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the domain.</typeparam>
            <nuget id="netfx-Patterns.EventStore"/>
        </member>
        <member name="M:EventStore`1.#cctor">
            <summary>
            Initializes the <see cref="P:EventStore`1.None"/> null object 
            pattern property.
            </summary>
        </member>
        <member name="P:EventStore`1.None">
            <summary>
            Gets a default domain event store implementation that 
            does nothing (a.k.a. Null Object Pattern).
            </summary>
        </member>
        <member name="T:IEventStore`1">
            <summary>
            Interface implemented by domain event stores.
            </summary>
            <typeparam name="TBaseEvent">The base type or interface implemented by events in the system.</typeparam>
            <nuget id="netfx-Patterns.EventStore"/>
        </member>
        <member name="M:IEventStore`1.Persist(`0)">
            <summary>
            Notifies the store that the given event
            should be persisted when <see cref="M:IEventStore`1.Commit"/> is called.
            </summary>
            <param name="event">The instance containing the event data.</param>
        </member>
        <member name="M:IEventStore`1.Query(StoredEventCriteria)">
            <summary>
            Queries the event store for events that match the given criteria.
            </summary>
            <remarks>
            This is the only low-level querying method that stores need to implement. 
            <para>
            As a facility for stores that persist events in an <see cref="T:System.Linq.IQueryable`1"/> 
            queryable object, the <see cref="T:StoredEventCriteria"/> object 
            can be converted to an expression using the <see cref="M:StoredEventCriteriaExtensions.ToExpression(StoredEventCriteria,System.Func{System.Type,System.String})"/> 
            extension method, making the query implementation trivial in that case.
            </para>
            <para>
            The more user-friendly querying API in <see cref="T:IEventQuery`1"/> 
            leverages this method internally and therefore can be used by any 
            event store implementation. It's accessible by executing the 
            <see cref="M:EventQueryExtensions.Query``1(IEventStore{``0})"/> extension method
            on an event store instance.
            </para>
            </remarks>
        </member>
        <member name="M:IEventStore`1.Commit">
            <summary>
            Persists all events <see cref="M:IEventStore`1.Persist(`0)"/>ed so far, effectively commiting 
            the changes to the underlying store in a unit-of-work style.
            </summary>
        </member>
        <member name="P:IEventStore`1.TypeNameConverter">
            <summary>
            Gets or sets the function that converts a <see cref="T:System.Type"/> to 
            its string representation in the store. Used to calculate the 
            values of <see cref="P:IStoredEvent.EventType"/>.
            </summary>
        </member>
        <member name="T:IStoredEvent">
            <summary>
            Represents a persisted event in an event store.
            </summary>
            <remarks>
            The core interface does not expose the event payload, 
            as its representation as well as specific storage type
            and serialization/deserialization can vary wildly 
            across store implementation. Imposing a particular 
            representation via this interface would be unnecessarily 
            restrictive and is not needed for the rest of the APIs.
            </remarks>
            <nuget id="netfx-Patterns.EventStore"/>
        </member>
        <member name="P:IStoredEvent.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:IStoredEvent.EventType">
            <summary>
            Gets the type of the event.
            </summary>
        </member>
        <member name="P:IStoredEvent.Timestamp">
            <summary>
            Gets the UTC timestamp of the event.
            </summary>
        </member>
        <member name="T:StoredEventCriteria">
            <summary>
            Represents the filter criteria for an event store query.
            </summary>
            <nuget id="netfx-Patterns.EventStore"/>
        </member>
        <member name="M:StoredEventCriteria.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:StoredEventCriteria"/> class.
            </summary>
        </member>
        <member name="P:StoredEventCriteria.EventTypes">
            <summary>
            List of event type filters. All types added are OR'ed with the 
            others (i.e. <c>EventType == ProductCreated OR EventType == ProductPublished</c>).
            </summary>
        </member>
        <member name="P:StoredEventCriteria.Since">
            <summary>
            Filters events that happened after the given starting date.
            </summary>
        </member>
        <member name="P:StoredEventCriteria.Until">
            <summary>
            Filters events that happened before the given ending date.
            </summary>
        </member>
        <member name="P:StoredEventCriteria.IsExclusiveRange">
            <summary>
            If set to <see langword="true"/>, <see cref="P:StoredEventCriteria.Since"/> and <see cref="P:StoredEventCriteria.Until"/> should 
            be considered as exclusive ranges (excludes values with a matching date). 
            Defaults to <see langword="false"/>, meaning that ranges are inclusive by default.
            </summary>
        </member>
        <member name="T:StoredEventCriteriaExtensions">
            <summary>
            Provides helper conversion of <see cref="T:StoredEventCriteria"/> 
            to a Linq <see cref="T:System.Linq.Expressions.Expression"/> that can be applied directly by 
            stores that have Linq providers to the underlying event stream in 
            the form of <see cref="T:System.Linq.IQueryable`1"/> of <see cref="T:IStoredEvent"/>.
            </summary>
        </member>
        <member name="M:StoredEventCriteriaExtensions.ToExpression(StoredEventCriteria,System.Func{System.Type,System.String})">
            <summary>
            Converts the criteria object into an expression tree that can be used to
            run queries against an <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="criteria">The criteria object to convert to a Linq expression.</param>
            <param name="typeNameConverter">The function that converts a <see cref="T:System.Type"/> to
            its string representation in the store. Used to calculate the
            <see cref="P:IStoredEvent.EventType"/>.</param>
            <returns>
            The criteria object converted to an expression that can be
            used to query an <see cref="T:System.Linq.IQueryable`1"/> if the store
            implementation provides one.
            </returns>
        </member>
        <member name="M:StoredEventCriteriaExtensions.StoredEventCriteriaBuilder.Build">
            <summary>
            Builds the expression for the criteria.
            </summary>
        </member>
        <member name="T:ExpressionCombiner">
            <summary>
            Combines linq expressions using logic operators And and Or.
            </summary>
            <remarks>
            This code was taken from the MSDN Blog meek: LINQ to Entities: Combining Predicates
            http://blogs.msdn.com/b/meek/archive/2008/05/02/linq-to-entities-combining-predicates.aspx
            </remarks>
            <nuget id="netfx-System.Linq.Expressions.ExpressionCombiner" />
        </member>
    </members>
</doc>
