<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".nuspec" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq" #>
<#@ Import Namespace="System.Xml" #>
<#@ Import Namespace="System.Xml.Linq" #>
<# var version = IncrementCurrentVersion(); #>
<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
	<metadata>
		<id>netfx-System.TypeInheritance</id>
		<version><#= version #></version>
		<title>Type Inheritance Tree</title>
		<description>Allows inspecting the exact type inheritance tree as declared in source, rather than the flattened view that reflection provides (for implemented interfaces, for example).

Enables code to determine what are the interfaces implemented directly by a type rather than a base class, as well as determine the "distance" in the hierarchy to those implementations.

var tree = typeof(Window).GetInheritanceTree();

// Gets just the base class ContentControl, instead 
// of that plus 9 interfaces implemented on base types
Assert.Equal(1, tree.Inheritance.Count);
Assert.Equal(typeof(ContentControl), tree.Inheritance.First().Type);
</description>
		<authors>Daniel Cazzulino, kzu, Clarius</authors>
		<language>en-US</language>
		<projectUrl>http://netfx.codeplex.com</projectUrl>
		<licenseUrl>http://netfx.codeplex.com/license</licenseUrl>
		<iconUrl>http://download.codeplex.com/Project/Download/FileDownload.aspx?ProjectName=netfx&amp;DownloadId=199201</iconUrl>
		<tags>netfx reflection</tags>
		<dependencies>
			<dependency id="netfx-Guard" version="1.2.0.0" />			
			<dependency id="netfx-System.Collections.Generic.IEnumerable.Traverse" version="1.0.0.9" />			
		</dependencies>
	</metadata>
</package>
<#+
private Version IncrementCurrentVersion()
{
	var currentSpec = this.Host.ResolvePath(".\\Package.nuspec");
	var version = new Version("1.0.0.0");
	try
	{
		var spec = XDocument.Load(currentSpec);
		var ns = XNamespace.Get("http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd");
		version = new Version(spec.Root.Element(ns + "metadata").Element(ns + "version").Value);
	}
	catch (XmlException e)
	{
		this.Host.LogErrors(new System.CodeDom.Compiler.CompilerErrorCollection(new[]
		{
			new System.CodeDom.Compiler.CompilerError(this.Host.ResolvePath("."), 20, 9, "0", 
				"There was an error trying to read the existing nuspec version to increment it: " + e.ToString()) 															
		}));
	}

	version = new Version(version.Major, version.Minor, version.Build, version.Revision + 1);

	return version;
}
#>