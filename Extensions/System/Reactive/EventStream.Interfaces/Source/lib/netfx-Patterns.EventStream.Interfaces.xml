<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Source</name>
    </assembly>
    <members>
        <member name="T:System.Reactive.EventPattern">
            <summary>
            Factory class for <see cref="T:System.Reactive.IEventPattern`1"/>.
            </summary>
            <nuget id="netfx-System.Reactive.EventStream.Interfaces"/>
        </member>
        <member name="M:System.Reactive.EventPattern.Create``1(System.Object,``0)">
            <summary>
            Creates an event pattern instance for the given sender and event argument value.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventPattern`1">
            <summary>
            Represents the Sender and EventArg values of a .NET event.
            </summary>
            <remarks>
            Exposes a very similar API to Rx <c>EventPattern&lt;TEventArgs&gt;</c> 
            but in a covariant-capable interface, so that subscribers can still 
            subscribe to the pattern but with a more generic base type or 
            interface implemented by the <typeparamref name="TEvent"/>. 
            It also removes the restriction that the argument value has to 
            derive from <see cref="P:System.Reactive.IEventPattern`1.EventArgs"/>.
            </remarks>
            <nuget id="netfx-System.Reactive.EventStream.Interfaces"/>
        </member>
        <member name="P:System.Reactive.IEventPattern`1.EventArgs">
            <summary>
            Gets the event arguments value of the event.
            </summary>
        </member>
        <member name="P:System.Reactive.IEventPattern`1.Sender">
            <summary>
            Gets the sender value of the event.
            </summary>
        </member>
        <member name="T:System.Reactive.IEventStream">
            <summary>
            Provides an observable stream of events that 
            can be used for analysis.
            </summary>
            <nuget id="netfx-System.Reactive.EventStream.Interfaces" />
        </member>
        <member name="M:System.Reactive.IEventStream.Push``1(``0)">
            <summary>
            Pushes an event to the stream, causing any analytics 
            subscriber to be invoked if appropriate.
            </summary>
        </member>
        <member name="M:System.Reactive.IEventStream.Of``1">
            <summary>
            Observes the events of a given type.
            </summary>
        </member>
        <member name="T:Guard">
            <summary>
            Common guard class for argument validation.
            </summary>
        </member>
        <member name="M:Guard.NotNull``1(System.Linq.Expressions.Expression{System.Func{``0}},``0)">
            <summary>
            Ensures the given <paramref name="value"/> is not null.
            Throws <see cref="T:System.ArgumentNullException"/> otherwise.
            </summary>
        </member>
        <member name="M:Guard.NotNullOrEmpty(System.Linq.Expressions.Expression{System.Func{System.String}},System.String)">
            <summary>
            Ensures the given string <paramref name="value"/> is not null or empty.
            Throws <see cref="T:System.ArgumentNullException"/> in the first case, or 
            <see cref="T:System.ArgumentException"/> in the latter.
            </summary>
        </member>
    </members>
</doc>
