<#@ Template Debug="True" Language="C#" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Diagnostics" #>
<#@ Import Namespace="System.Xml.Linq" #>
<#@ Import Namespace="System.Text.RegularExpressions" #>
<#@ Parameter Name="MakePublic" Type="System.Boolean" #>
<#@ Parameter Name="ResourcesTypeName" Type="System.String" #>
<#@ Parameter Name="TargetNamespace" Type="System.String" #>
<#@ Parameter Name="TargetClassName" Type="System.String" #>
<#@ Parameter Name="RootArea" Type="NetFx.ResourceArea" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Globalization;

namespace <#= TargetNamespace #>
{<#
RenderArea(RootArea, MakePublic ? "public" : "internal");
#>}

<#+
private void RenderMessageHint(string value)
{
	value = new System.Xml.Linq.XText(value).ToString();
	foreach (var line in value.Split(new [] { '\n' }, StringSplitOptions.None))
    {
	    PushIndent("\t");
#>
/// <#= line #>
<#+
        PopIndent();
    }
}

private void RenderArea(ResourceArea area, string visibility)
{
    PushIndent("\t");

#>

/// <summary>
/// Provides access to string resources.
/// </summary>
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("TypedResx", "1.0.0.0")]
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
<#= visibility #> static partial class <#= area.Name #>
{<#+
	foreach (var value in area.Values)
	{
		if (!value.HasFormat)
		{
#>

	/// <summary>
	/// Looks up a localized string similar to: 
<#+ RenderMessageHint(value.Value); #>
	/// </summary>
	public static string <#= value.Name #> { get { return <#= ResourcesTypeName #>.<#= area.Prefix #><#= value.Name #>; } }
<#+
		}
        else if (value.IsIndexed)
        {
#>

	/// <summary>
	/// Looks up a localized string similar to: 
<#+ RenderMessageHint(value.Value); #>
	/// </summary>
	public static string <#= value.Name #>(<#= string.Join(", ", value.Format.Select((s, i) => "object arg" + i)) #>)
	{
        var args = new [] { <#= string.Join(", ", value.Format.Select((s, i) => "arg" + i)) #> };
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, <#= ResourcesTypeName #>.<#= area.Prefix #><#= value.Name #>, args);
	}
<#+
        }
		else
		{
#>

	/// <summary>
	/// Looks up a localized string similar to: 
<#+ RenderMessageHint(value.Value); #>
	/// </summary>
	public static string <#= value.Name #>(<#= string.Join(", ", value.Format.Select(s => "object " + s)) #>)
	{
		return <#= ResourcesTypeName #>.<#= area.Prefix #><#= value.Name #>.FormatWith(new 
		{
<#+
for (int i = 0; i < value.Format.Count; i++)
{
#>
			<#= value.Format[i] #> = <#= value.Format[i]#>,
<#+
}
#>
		});
	}
<#+
		}
	}

	foreach (var nestedArea in area.NestedAreas)
	{
		RenderArea(nestedArea, "public");
	}
#>
}
<#+
	PopIndent();
}
#>