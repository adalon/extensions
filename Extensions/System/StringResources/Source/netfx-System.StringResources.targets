<?xml version="1.0" encoding="utf-8"?>
<!--
	The MIT License (MIT)

	Copyright (c) 2015 NETFx

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="NetFx.StringResources" AssemblyFile="netfx-System.StringResources.dll" />

  <PropertyGroup>
    <CompileDependsOn>
      GenerateStringResources;
      $(CompileDependsOn)
    </CompileDependsOn>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <ResxCode>
      <!-- Whether the generated strong-typed class should be public or not.
           Defaults to whatever the corresponding .resx file specifies. -->
      <Public></Public>
      <!-- Override default target namespace, which equals the RootNamespace + 
           the relative directory of the .resx file (matches default behavior 
           of the resx file code generator. Note that we cannot retrieve automatically 
           the Custom Tool Namespace property, so this must be used for those 
           cases. -->
      <TargetNamespace></TargetNamespace>
      <!-- Customize the generated class name to be something other than 'Strings' -->
      <TargetClassName></TargetClassName>
      <Generator>MSBuild:Compile</Generator>
    </ResxCode>
  </ItemDefinitionGroup>

  <ItemGroup>
    <ResxCode Include="@(EmbeddedResource -> WithMetadataValue('Generator', 'ResXFileCodeGenerator'))">
      <Public>False</Public>
    </ResxCode>
    <ResxCode Include="@(EmbeddedResource -> WithMetadataValue('Generator', 'PublicResXFileCodeGenerator'))">
      <Public>True</Public>
    </ResxCode>
    <Compile Include="@(ResxCode -> '$(IntermediateOutputPath)%(RelativeDir)%(Filename).Strings$(DefaultLanguageSourceExtension)')" />
  </ItemGroup>

  <Target Name="GenerateStringResources"
          BeforeTargets="BuildOnlySettings"
          Inputs="@(ResxCode)"
          Outputs="$(IntermediateOutputPath)%(RelativeDir)%(Filename).Strings$(DefaultLanguageSourceExtension)"
          Returns="@(TypedResx)">
    <StringResources RootNamespace="$(RootNamespace)"
               OutputPath="$(IntermediateOutputPath)"
               Language="$(Language)"
               FileExtension="$(DefaultLanguageSourceExtension)"
               ResxFiles="@(ResxCode)">
      <Output TaskParameter="GeneratedFiles" ItemName="StringResource" />
      <Output TaskParameter="GeneratedFiles" ItemName="Compile" />
    </StringResources>

    <ItemGroup>
      <FileWrites Include="@(StringResource)" />
    </ItemGroup>
  </Target>

</Project>