<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".nuspec" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq" #>
<#@ Import Namespace="System.Xml" #>
<#@ Import Namespace="System.Xml.Linq" #>
<# var version = IncrementCurrentVersion(); #>
<?xml version="1.0" encoding="utf-8"?>
<package xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
	<metadata>
		<id>netfx-Microsoft.ApplicationServer.Http.HttpWebService</id>
		<version><#= version #></version>
		<title>HttpWebService&lt;TService&gt; for Testing Services</title>
		<description>Provides an HttpWebService&lt;TService&gt; disposable class to use in tests to host WebApi services and unit test them</description>
		<authors>Clarius, Daniel Cazzulino, kzu</authors>
		<language>en-US</language>
		<projectUrl>http://netfx.codeplex.com</projectUrl>
		<licenseUrl>http://netfx.codeplex.com/license</licenseUrl>
		<iconUrl>http://download.codeplex.com/Project/Download/FileDownload.aspx?ProjectName=netfx&amp;DownloadId=199201</iconUrl>
		<tags>netfx wcf webapi testing tdd</tags>
		<dependencies>
			<dependency id="WebApi.Enhancements" version="0.3.0" />
		</dependencies>
	</metadata>
</package>
<#+
private Version IncrementCurrentVersion()
{
	var currentSpec = this.Host.ResolvePath(".\\Package.nuspec");
	var version = new Version("1.0.0.0");
	try
	{
		var spec = XDocument.Load(currentSpec);
		var ns = XNamespace.Get("http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd");
		version = new Version(spec.Root.Element(ns + "metadata").Element(ns + "version").Value);
	}
	catch (XmlException e)
	{
		this.Host.LogErrors(new System.CodeDom.Compiler.CompilerErrorCollection(new[]
		{
			new System.CodeDom.Compiler.CompilerError(this.Host.ResolvePath("."), 20, 9, "0", 
				"There was an error trying to read the existing nuspec version to increment it: " + e.ToString()) 															
		}));
	}

	version = new Version(version.Major, version.Minor, version.Build, version.Revision + 1);

	return version;
}
#>